import cakeModel from './db/models/cake.model.js'
import orderModel from './db/models/order.model.js'
import { Keyboard, InputFile } from 'grammy'
import nodemailer from 'nodemailer'
import { finalMenu } from './keyboards/inline/index.js'

let cakesPerPage = 6,
    currentCakesPage = 1

const botmail = 'wowtortbot@lukas.com.ua',
    botpassword = 'Wowtort2701';
const transporter = nodemailer.createTransport({
    host: 'mail.lukas.com.ua',
    port: 465,
    secure: true,
    auth: {
        user: botmail,
        pass: botpassword
    }
});

function sMail(mail, subject, text) {
    let mailOptions = {
        from: botmail,
        to: mail,
        subject: subject,
        text: text
    };

    transporter.sendMail(mailOptions, function (error, info) {
        if (error) {
            console.log(error);
        } else {
            console.log('Email sent: ' + info.response);
        }
    });
}

function sendCakesPhotos(ctx, category) {
    cakeModel.find(category).then(cakes => {
        if (currentCakesPage != Math.ceil(cakes.length / cakesPerPage)) {
            for (let i = 0; i < cakesPerPage; i++) {
                ctx.replyWithPhoto(new InputFile(cakes[(currentCakesPage - 1) * cakesPerPage + i].source), { caption: `*${cakes[(currentCakesPage - 1) * cakesPerPage + i].name}*\n–û–ø–∏—Å: ${cakes[(currentCakesPage - 1) * cakesPerPage + i].description}\n–¶—ñ–Ω–∞: *${cakes[(currentCakesPage - 1) * cakesPerPage + i].price} –≥—Ä–Ω*\n–í–∞–≥–∞: ${cakes[(currentCakesPage - 1) * cakesPerPage + i].weight}\n–¢–µ—Ä–º—ñ–Ω –ø—Ä–∏–¥–∞—Ç–Ω–æ—Å—Ç—ñ: ${cakes[(currentCakesPage - 1) * cakesPerPage + i].expiration}`, parse_mode: "MarkdownV2" }).catch(err => { console.log(err) })
            }
        }
        else {
            for (let i = 0; i < cakes.length % cakesPerPage; i++) {
                ctx.replyWithPhoto(new InputFile(cakes[(currentCakesPage - 1) * cakesPerPage + i].source), { caption: `*${cakes[(currentCakesPage - 1) * cakesPerPage + i].name}*\n–û–ø–∏—Å: ${cakes[(currentCakesPage - 1) * cakesPerPage + i].description}\n–¶—ñ–Ω–∞: *${cakes[(currentCakesPage - 1) * cakesPerPage + i].price} –≥—Ä–Ω*\n–í–∞–≥–∞: ${cakes[(currentCakesPage - 1) * cakesPerPage + i].weight}\n–¢–µ—Ä–º—ñ–Ω –ø—Ä–∏–¥–∞—Ç–Ω–æ—Å—Ç—ñ: ${cakes[(currentCakesPage - 1) * cakesPerPage + i].expiration}`, parse_mode: "MarkdownV2" }).catch(err => { console.log(err) })
            }
        }
    })
}


function cakesMenuUpdate(ctx, category = { category: '–°–≤—è—Ç–∫–æ–≤–∏–π' }) {
    cakeModel.find(category).then(async cakes => {
        sendCakesPhotos(ctx, category)

        const menu = new Keyboard()
            .text('‚¨ÖÔ∏è–©–µ —Ç–æ—Ä—Ç–∏').text('–©–µ —Ç–æ—Ä—Ç–∏‚û°Ô∏è').row();

        if (currentCakesPage != Math.ceil(cakes.length / cakesPerPage)) {
            for (let i = 0; i < cakesPerPage; i++) {
                menu.text(cakes[(currentCakesPage - 1) * cakesPerPage + i].name)
                if (i == 2) {
                    menu.row()
                }
            }
        }
        else {
            for (let i = 0; i < cakes.length % cakesPerPage; i++) {
                menu.text(cakes[(currentCakesPage - 1) * cakesPerPage + i].name)
                if (i == 2) {
                    menu.row()
                }
            }
        }

        menu.row().text('‚¨ÖÔ∏è–ö–∞—Ç–µ–≥–æ—Ä—ñ—ó').text('üÜò–ü–æ—Ç—Ä—ñ–±–Ω–∞ –¥–æ–ø–æ–º–æ–≥–∞');

        ctx.reply(`${currentCakesPage}/${Math.ceil(cakes.length / cakesPerPage)}`, { reply_markup: { resize_keyboard: true, keyboard: menu.build() } })
    })
}

function nextPage(ctx, currentCategory) {
    cakeModel.find({ category: currentCategory }).then(cakes => {
        if (currentCakesPage >= Math.ceil(cakes.length / cakesPerPage)) {
            currentCakesPage = 1
            cakesMenuUpdate(ctx, { category: currentCategory })
        }
        else {
            currentCakesPage++
            cakesMenuUpdate(ctx, { category: currentCategory })
        }
    })
}

function prevPage(ctx, currentCategory) {
    cakeModel.find({ category: currentCategory }).then(cakes => {
        if (currentCakesPage <= 1) {
            currentCakesPage = Math.ceil(cakes.length / cakesPerPage)
            cakesMenuUpdate(ctx, { category: currentCategory })
        }
        else {
            currentCakesPage--
            cakesMenuUpdate(ctx, { category: currentCategory })
        }
    })
}

async function createOrder(ctx, order) {
    orderModel.create(order)
        .then(() => console.log('[OK] Order is created'))
        .catch(err => console.error(err));
    if (order.date == undefined)
        order.date = '(–Ω–µ –≤–∫–∞–∑–∞–Ω–æ)'
    await ctx.deleteMessage()
    await ctx.reply('–í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:\n–ö–æ—à–∏–∫: ' + order.cart + '\n–î–∞—Ç–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è: ' + order.date + '\n–í—Å—å–æ–≥–æ –¥–æ —Å–ø–ª–∞—Ç–∏: ' + order.price + ' –≥—Ä–Ω')
    await ctx.reply(`‚úÖ–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ!‚úÖ\n\n–ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø–ª–∞—Ç—ñ—Ç—å ${ctx.session.order.price} –≥—Ä–Ω. –Ω–∞ –∫–∞—Ä—Ç—É: \n4246 0010 0214 6730`)
    await ctx.reply('–ó–∞ –¥–ª—è –í–∞—à–æ—ó –±–µ–∑–ø–µ–∫–∏, –ø—ñ–¥ —á–∞—Å –¥—ñ—ó –ø–æ–≤—ñ—Ç—Ä—è–Ω–Ω–æ—ó —Ç—Ä–∏–≤–æ–≥–∏ –¥–æ—Å—Ç–∞–≤–∫–∞ –Ω–∞ –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è')
    await ctx.reply("–ù–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º –∑ –í–∞–º–∏ –∑–≤'—è–∂–µ—Ç—å—Å—è –Ω–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä. –ë—É–¥—å –ª–∞—Å–∫–∞, –ø—ñ–¥—Ç–≤–µ—Ä–¥—ñ—Ç—å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–∞—à–æ–º—É –º–µ–Ω–µ–¥–∂–µ—Ä—É. –ë–µ–∑ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –º–∏ –Ω–µ –∑–º–æ–∂–µ–º–æ –≤–∑—è—Ç–∏ —É –≤–∏—Ä–æ–±–Ω–∏—Ü—Ç–≤–æ.", { reply_markup: finalMenu })
}
export { cakesMenuUpdate, nextPage, prevPage, createOrder, sMail }