import { Bot, Keyboard, InlineKeyboard, session } from 'grammy';
import dotenv from 'dotenv';
import moment from 'moment';

import { connectToMongo, createUser, findUser } from './db/index.js';
import { mainMenu, cakeCategorys, requestContact } from './keyboards/markup/index.js';
import { dateChoose, deliveryChoose, infoKeyboard, clearHelp, help, orderConfirm, emptyKeyboard, productMenu, cartConfirm } from './keyboards/inline/index.js';
import { cakesMenuUpdate, nextPage, prevPage, createOrder, sMail } from './customFuncs.js';
import Calendar from './calendar.js';

import cakeModel from './db/models/cake.model.js';
import userModel from './db/models/user.model.js';
import optionsModel from './db/models/options.model.js';

dotenv.config();
moment.locale('uk');
console.log(moment())

connectToMongo(process.env.MONGO_URI);
const calendar = new Calendar({ minDate: new Date().setDate(new Date().getDate() - 1), maxDate: new Date().setMonth(new Date().getMonth() + 3) });

const BOT_TOKEN = process.env.BOT_TOKEN;
const bot = new Bot(BOT_TOKEN);
const managerPhoneNum = '+380981234516';

function initial() {
    return { product: {}, cart: [], order: {}, currentCategory: '–¢–æ—Ä—Ç–∏ "–ï–∫—Å–∫–ª—é–∑–∏–≤"' };
}
bot.use(session({ initial }));

bot.on('msg:contact', async ctx => {
    createUser({ firstName: ctx.from.first_name, phoneNumber: ctx.message.contact.phone_number, _id: ctx.from.id })
    ctx.reply('–ü—Ä–∏–≤—ñ—Ç, ' + ctx.from.first_name + '!')
    await sleep(1)
    ctx.reply('–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –≤ –º–∞–≥–∞–∑–∏–Ω Lukas!‚ò∫')
    await sleep(1)
    ctx.reply('–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π –º–µ–Ω—é, –¥–ª—è –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó‚¨á', { reply_markup: { resize_keyboard: true, keyboard: mainMenu.build() } })
})

bot.on('msg', async ctx => {
    const product = ctx.session.product;
    const cart = ctx.session.cart;
    const currentCategory = ctx.session.currentCategory;

    if (await findUser(ctx.from.id) === null)
        ctx.reply('‚ùóÔ∏è–î–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –±–æ—Ç–æ–º –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ —Å–≤—ñ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É‚ùóÔ∏è\n\nüç¨ –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É "–ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É". –Ø–∫—â–æ —Ç–∞–∫–∞ –∫–Ω–æ–ø–∫–∞ –Ω–µ –≤—ñ–¥–æ–±—Ä–∞–∂–∞—î—Ç—å—Å—è, –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ —ñ–∫–æ–Ω–∫—É üéõ –≤ –ø–æ–ª—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.', { reply_markup: { resize_keyboard: true, keyboard: requestContact.build() } })
    else {
        let text = ctx.message.text
        if (text == '/start') {
            ctx.reply('–ü—Ä–∏–≤—ñ—Ç, ' + ctx.from.first_name + '!')
            await sleep(1)
            ctx.reply('–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –≤ –º–∞–≥–∞–∑–∏–Ω Lukas!‚ò∫')
            await sleep(1)
            ctx.reply('–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π –º–µ–Ω—é, –¥–ª—è –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó‚¨á', { reply_markup: { resize_keyboard: true, keyboard: mainMenu.build() } })
        }
        if (text == 'üõí–ó–∞–º–æ–≤–∏—Ç–∏ —Ç–æ—Ä—Ç')
            ctx.reply('–ú–µ–Ω—é —Ç–æ—Ä—Ç—ñ–≤:', { reply_markup: { resize_keyboard: true, keyboard: cakeCategorys.build() } })
        if (text == '‚ÑπÔ∏è–ò–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è')
            ctx.reply('–ü–ü –í–¢–ö ¬´–õ—É–∫–∞—Å¬ª\n–£–∫—Ä–∞—ó–Ω–∞, –º. –ö—Ä–µ–º–µ–Ω—á—É–∫,\n–≤—É–ª. –ß–∫–∞–ª–æ–≤–∞ 186\n0 800 50 50 91\nhotline@lukas.ua', { reply_markup: infoKeyboard })
        if (text == '‚≠ê–ó–∞–ª–∏—à–∏—Ç–∏ –≤—ñ–¥–≥—É–∫')
            ctx.reply('–û—Ç–ø—Ä–∞–≤—Ç–µ —Ñ–æ—Ç–æ —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤: (–ø–æ–∫–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç)')

        if (text == '–¢–æ—Ä—Ç–∏ "–ï–∫—Å–∫–ª—é–∑–∏–≤"') {
            await ctx.reply('–¢–æ—Ä—Ç–∏ "–ï–∫—Å–∫–ª—é–∑–∏–≤":')
            ctx.session.currentCategory = '–¢–æ—Ä—Ç–∏ "–ï–∫—Å–∫–ª—é–∑–∏–≤"'
            cakesMenuUpdate(ctx, { category: text })
        }
        if (text == '–¢—ñ—Å—Ç–µ—á–∫–∞') {
            await ctx.reply('–¢—ñ—Å—Ç–µ—á–∫–∞:')
            ctx.session.currentCategory = '–¢—ñ—Å—Ç–µ—á–∫–∞'
            cakesMenuUpdate(ctx, { category: text })
        }
        if (text == '–ü—Ä—è–Ω–∏–∫–∏') {
            await ctx.reply('–ü—Ä—è–Ω–∏–∫–∏:')
            ctx.session.currentCategory = '–ü—Ä—è–Ω–∏–∫–∏'
            cakesMenuUpdate(ctx, { category: text })
        }
        if (text == '–ü–µ—á–∏–≤–æ') {
            await ctx.reply('–ü–µ—á–∏–≤–æ:')
            ctx.session.currentCategory = '–ü–µ—á–∏–≤–æ'
            cakesMenuUpdate(ctx, { category: text })
        }

        if (text == 'üÜò–ü–æ—Ç—Ä—ñ–±–Ω–∞ –¥–æ–ø–æ–º–æ–≥–∞') {
            ctx.reply("–ë–∞–∂–∞—î—Ç–µ –∑–≤'—è–∑–∞—Ç–∏—Å—è –∑ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º —Ç–∞ –¥–æ–¥–∞—Ç–∫–æ–≤–æ –ø—Ä–æ–∫–æ–Ω—Å—É–ª—å—Ç—É–≤–∞—Ç–∏—Å—è? (–ó–≤'—è–∑–∞—Ç–∏—Å—è –∑ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º –º–æ–∂–Ω–æ —Ç—ñ–ª—å–∫–∏ —É –±—É–¥–Ω—ñ, –∑ 9:00 –¥–æ 17:00)", { reply_markup: clearHelp })
        }
        if (text == '‚¨ÖÔ∏è–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é') {
            ctx.reply('–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:', { reply_markup: { resize_keyboard: true, keyboard: mainMenu.build() } })
        }
        if (text == '‚¨ÖÔ∏è–ö–∞—Ç–µ–≥–æ—Ä—ñ—ó') {
            ctx.reply('–ö–∞—Ç–µ–≥–æ—Ä—ñ—ó:', { reply_markup: { resize_keyboard: true, keyboard: cakeCategorys.build() } })
        }

        cakeModel.findOne({ name: text }).then(async cake => {
            if (cake != null) {
                ctx.session.product.cake = text
                ctx.session.product.price = cake.price
                ctx.session.cart.push({ cake: product.cake, price: product.price })
                ctx.reply('–¢–æ–≤–∞—Ä –¥–æ–¥–∞–Ω–æ –≤ –∫–æ—à–∏–∫', { reply_markup: productMenu })
            }
        })
        if (text == '–ë—ñ–ª—å—à–µ —Ç–æ—Ä—Ç—ñ–≤') {
            nextPage(ctx, currentCategory)
        }
        if (text == '–ù–∞–∑–∞–¥') {
            prevPage(ctx, currentCategory)
        }
    }
})

bot.on('callback_query:data', async ctx => {
    const data = ctx.callbackQuery.data;
    const cart = ctx.session.cart;
    const order = ctx.session.order;

    if (data == 'delete') {
        ctx.editMessageReplyMarkup({ reply_markup: emptyKeyboard });
    }

    if (data == 'openCart') {
        let cartList = '';
        for (let i = 0; i < cart.length; i++) {
            cartList += `${cart[i].cake} (${cart[i].price} –≥—Ä–Ω.);\n`
        }
        ctx.deleteMessage();
        ctx.reply(`–¢–æ–≤–∞—Ä–∏ —É –≤–∞—à–æ–º—É –∫–æ—à–∏–∫—É: ${cart.length}\n\n–í–∞—à –∫–æ—à–∏–∫:\n${cartList}`, { reply_markup: cartConfirm })
    }

    if (data == 'orderCart') {
        ctx.deleteMessage();
        let cartList = '';
        ctx.session.order.price = 0;
        ctx.session.order.cartArray = [];
        for (let i = 0; i < cart.length; i++) {
            ctx.session.order.price += cart[i].price;
            ctx.session.order.cartArray.push(`${cart[i].cake} (${cart[i].price} –≥—Ä–Ω.)`)
            cartList += `${cart[i].cake} (${cart[i].price} –≥—Ä–Ω.);\n`
        }
        ctx.session.order.cart = cartList;
        JSON.stringify(order.cartArray);
        ctx.reply('–û–±–µ—Ä—ñ—Ç—å —Ç–æ—á–∫—É –≤–∏–≤–µ–∑–µ–Ω–Ω—è:', { reply_markup: deliveryChoose })
    }

    if (data == 'clearCart') {
        ctx.deleteMessage();
        ctx.reply('üóëÔ∏è–ö–æ—à–∏–∫ –ø—É—Å—Ç–∏–π')
        ctx.session.cart = [];
    }

    if (data == 'deleteProduct') {
        ctx.deleteMessage();
        ctx.session.cart.shift();
        ctx.reply('–¢–æ–≤–∞—Ä –≤–∏–¥–∞–ª–µ–Ω–æ –∑ –∫–æ—à–∏–∫—É')
    }

    if (data == 'delivery' || data == 'pickup') {
        if (data == 'delivery') {
            ctx.session.order.deliveryPoint = '–î–æ—Å—Ç–∞–≤–∫–∞'
        }
        if (data == 'pickup') {
            ctx.session.order.deliveryPoint = '–°–∞–º–æ–≤–∏–≤—ñ–∑'
        }

        ctx.editMessageText('–ë–∞–∂–∞—î—Ç–µ –≤–∫–∞–∑–∞—Ç–∏ –¥–∞—Ç—É –≤–∏–≤–µ–∑–µ–Ω–Ω—è?', { reply_markup: dateChoose });
    }

    if (data == 'dateNo') {
        ctx.editMessageText("–ë–∞–∂–∞—î—Ç–µ –∑–≤'—è–∑–∞—Ç–∏—Å—è –∑ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º —Ç–∞ –¥–æ–¥–∞—Ç–∫–æ–≤–æ –ø—Ä–æ–∫–æ–Ω—Å—É–ª—å—Ç—É–≤–∞—Ç–∏—Å—è? (–ó–≤'—è–∑–∞—Ç–∏—Å—è –∑ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º –º–æ–∂–Ω–æ —Ç—ñ–ª—å–∫–∏ —É –±—É–¥–Ω—ñ, –∑ 9:00 –¥–æ 17:00)", { reply_markup: help })
    }
    if (data == 'dateYes') {
        ctx.editMessageText('–û–±–µ—Ä—ñ—Ç—å –¥–∞—Ç—É –≤–∏–≤–µ–∑–µ–Ω–Ω—è:', { reply_markup: calendar.getCalendarKeyboard() })
    }

    if (data == 'helpNo') {
        if (order.date == undefined)
            ctx.editMessageText('–ü—ñ–¥—Ç–≤–µ—Ä–¥—ñ—Ç—å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:\n\n–ö–æ—à–∏–∫:\n' + order.cart + '\n–¶—ñ–Ω–∞: ' + order.price + '–≥—Ä–Ω\n' + '–î–∞—Ç–∞ –≤–∏–≤–µ–∑–µ–Ω–Ω—è: (–Ω–µ –≤–∫–∞–∑–∞–Ω–∞)', { reply_markup: orderConfirm })
        else
            ctx.editMessageText('–ü—ñ–¥—Ç–≤–µ—Ä–¥—ñ—Ç—å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:\n\n–ö–æ—à–∏–∫:\n' + order.cart + '\n–¶—ñ–Ω–∞: ' + order.price + '–≥—Ä–Ω\n' + '–î–∞—Ç–∞ –≤–∏–≤–µ–∑–µ–Ω–Ω—è: ' + order.date, { reply_markup: orderConfirm })
    }
    /*if (data == 'liqpay')
        if (liqpayment(config.liqpayPublicKey, config.liqpayPrivateKey, order.price) == 'success')
            createOrder(ctx, order, ctx.from.id)*/
    if (data == 'bought') {
        await userModel.findOne({ _id: ctx.from.id }).then(user => {
            ctx.session.order.phoneNumber = user.phoneNumber
        })
        await createOrder(ctx, order)
        await optionsModel.findOne({}).then(async options => {
            sMail(options.mail, ctx.from.first_name + ' (' + ctx.from.id + ')', '–ö–æ—à–∏–∫:\n' + order.cart + '\n–¶—ñ–Ω–∞: ' + order.price + ' –≥—Ä–Ω\n' + '–¢–æ—á–∫–∞ –≤–∏–≤–µ–∑–µ–Ω–Ω—è: ' + order.deliveryPoint + '\n–î–∞—Ç–∞ –≤–∏–≤–µ–∑–µ–Ω–Ω—è: ' + order.date + '\n–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É: ' + order.phoneNumber)
        })
        ctx.session.order = {}
        ctx.session.cart = []
    }
    if (data == 'backToMainMenu') {
        ctx.editMessageReplyMarkup({ reply_markup: emptyKeyboard })
        ctx.reply('–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:', { reply_markup: { resize_keyboard: true, keyboard: mainMenu.build() } })
    }
    if (data == 'callHelp') {
        ctx.editMessageReplyMarkup({ reply_markup: { remove_keyboard: true } })
        if ((moment(new Date).day() < 6) && (moment(new Date, moment.TIME).isAfter(moment(new Date, moment.TIME).startOf('day').add(17, 'h')) || moment(new Date, moment.TIME).isBefore(moment(new Date, moment.TIME).startOf('day').add(9, 'h')))) {
            ctx.reply('–í–∞—à –ø–æ—Ç–æ—á–Ω–∏–π —á–∞—Å: ' + moment(new Date, moment.TIME).format('HH:mm') + '\n–ú–µ–Ω–µ–¥–∂–µ—Ä –º–æ–∂–µ –ø—ñ–¥–∫–ª—é—á–∏—Ç–∏—Å—å —Ç—ñ–ª—å–∫–∏ —É –±—É–¥–Ω—ñ, –∑ 9:00 –¥–æ 17:00', { reply_markup: { remove_keyboard: true } })
        }
        else {
            await ctx.deleteMessage(ctx.update.callback_query.message.message_id)
            await ctx.replyWithContact(managerPhoneNum, '–û–ø–µ—Ä–∞—Ç–æ—Ä').catch(async err => { await ctx.reply('–û–ø–µ—Ä–∞—Ç–æ—Ä:\n' + managerPhoneNum) })
        }
    }
    if (data == 'closeKeyboard') {
        ctx.editMessageReplyMarkup({ reply_markup: emptyKeyboard })
    }

    if (data === 'null') {
        return;
    }
    else if (data === 'prev') {
        ctx.editMessageReplyMarkup({ reply_markup: calendar.getPrevMonth() });
    }
    else if (data === 'next') {
        ctx.editMessageReplyMarkup({ reply_markup: calendar.getNextMonth() });
    }
    else if (moment(data).isValid()) {
        ctx.deleteMessage();
        ctx.session.order.date = moment(data).format('DD-MM-YYYY');
        ctx.reply("–ë–∞–∂–∞—î—Ç–µ –∑–≤'—è–∑–∞—Ç–∏—Å—è –∑ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º —Ç–∞ –¥–æ–¥–∞—Ç–∫–æ–≤–æ –ø—Ä–æ–∫–æ–Ω—Å—É–ª—å—Ç—É–≤–∞—Ç–∏—Å—è? (–ó–≤'—è–∑–∞—Ç–∏—Å—è –∑ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º –º–æ–∂–Ω–æ —Ç—ñ–ª—å–∫–∏ —É –±—É–¥–Ω—ñ, –∑ 9:00 –¥–æ 17:00)", { reply_markup: help })
    }
    await ctx.answerCallbackQuery();
})

bot.start()

process.once("SIGINT", () => bot.stop());
process.once("SIGTERM", () => bot.stop());

const sleep = ms => new Promise(resolve => setTimeout(resolve, ms * 1000));